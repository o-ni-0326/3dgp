//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   float4 material_color;             // Offset:  128 Size:    16
//   float4 light_direction;            // Offset:  144 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CONSTANT_BUFFER                   cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c6         cb0             0         4  ( FLT, FLT, FLT, FLT)
// c10        cb0             8         1  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c5                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c4, 0, 0, 1, -2
    def c0, 1, 0, 0, 0
    def c1, 0, 1, 0, 0
    def c2, 0, 0, 1, 0
    def c3, 0, 0, 0, 1
    defi i0, 4, 0, 1, 0
    dcl_texcoord v0  // position<0,1,2,3>
    dcl_texcoord2 v2  // texcoord<0,1>
    dcl_texcoord3 v3  // bone_weights<0,1,2,3>
    dcl_texcoord4 v4  // bone_indices<0,1,2,3>

#line 6 "C:\Users\2170347\Source\Repos\3dgp\geometric_primitive_vs.hlsl"
    mul r0, v0.x, c6
    mul r1, v0.y, c7
    add r0, r0, r1
    mul r1, v0.z, c8
    add r0, r0, r1
    mul r1, v0.w, c9
    add r0, r0, r1  // ::vout<0,1,2,3>

#line 13
    mov r1.xyz, c0.w  // ::influence<0,1,2>
    loop aL, i0
      dp4 r1.w, v3, c0[aL]  // ::weight<0>
      if_lt c0.w, r1.w
        dp4 r2.x, v4, c0[aL]
        if_lt r2.x, c0.x
          add r2.y, r2.x, -c0.w
          mov r2.z, -r2.y
          sge r2.y, r2.z, r2.y
          add r2.y, r2.y, c0.w
          mov r2.z, -r2.y
          if_lt r2.z, r2.y
            mov r1.x, r1.w  // ::influence<0>
          else
          endif
        else
          add r2.y, r2.x, -c0.x
          mul r2.y, r2.y, r2.y
          mov r2.z, -r2.y
          sge r2.y, r2.z, r2.y
          add r2.y, r2.y, c0.w
          mov r2.z, -r2.y
          if_lt r2.z, r2.y
            mov r1.y, r1.w  // ::influence<1>
          else
            add r2.x, r2.x, c4.w
            mul r2.x, r2.x, r2.x
            mov r2.y, -r2.x
            sge r2.x, r2.y, r2.x
            add r2.x, r2.x, c0.w
            mov r2.y, -r2.x
            if_lt r2.y, r2.x
              mov r1.z, r1.w  // ::influence<2>
            else
            endif
            mov r1.yz, r1  // ::influence<1,2>
          endif
          mov r1.xyz, r1  // ::influence<0,1,2>
        endif
      else
      endif
    endloop

#line 24
    mov r1.x, r1.x  // ::vout<4>
    mov r1.y, r1.y  // ::vout<5>
    mov r1.z, r1.z  // ::vout<6>

#line 27
    mov r1.w, c10.w  // ::vout<7>
    mov r2.xy, v2  // ::vout<8,9>
    mov oT0.xyz, r1  // ::main<4,5,6>
    mov oT0.w, r1.w  // ::main<7>
    mov r0.xy, r0  // ::main<0,1>
    mov r0.zw, r0  // ::main<2,3>
    mov oT1.xy, r2  // ::main<8,9>

#line 3
    mul r1.xy, r0.w, c5
    add oPos.xy, r0, r1  // ::main<0,1>
    mov oPos.zw, r0  // ::main<2,3>

// approximately 75 instruction slots used
vs_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer cb0[9], immediateIndexed
dcl_input v0.xyzw
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; v1.w <- normal.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   v3.x <- bone_weights.x; v3.y <- bone_weights.y; v3.z <- bone_weights.z; v3.w <- bone_weights.w; 
//   v4.x <- bone_indices.x; v4.y <- bone_indices.y; v4.z <- bone_indices.z; v4.w <- bone_indices.w; 
//   o2.x <- <main return value>.texcoord.x; o2.y <- <main return value>.texcoord.y; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 6 "C:\Users\2170347\Source\Repos\3dgp\geometric_primitive_vs.hlsl"
mul r0.xyzw, v0.xxxx, cb0[0].xyzw
mul r1.xyzw, v0.yyyy, cb0[1].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, v0.zzzz, cb0[2].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mul r1.xyzw, v0.wwww, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w

#line 12
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- influence.x; r1.y <- influence.y; r1.z <- influence.z
mov r1.w, l(0)  // r1.w <- i
mov r2.yzw, r1.xxyz  // r2.y <- influence.x; r2.z <- influence.y; r2.w <- influence.z
mov r2.x, r1.w  // r2.x <- i
loop 
  ilt r3.x, r2.x, l(4)
  breakc_z r3.x
  dp4 r3.x, v3.xyzw, icb[r2.x + 0].xyzw  // r3.x <- weight
  lt r3.y, l(0.000000), r3.x
  if_nz r3.y
    and r4.xyzw, v4.xyzw, icb[r2.x + 4].xyzw
    or r3.yz, r4.yywy, r4.xxzx
    or r3.y, r3.z, r3.y
    switch r3.y
      case l(0)
      mov r2.y, r3.x
      break 
      case l(1)
      mov r2.z, r3.x
      mov r2.yzw, r2.yyzw
      break 
      case l(2)
      mov r2.w, r3.x
      break 
      default 
      break 
    endswitch 
  endif 

#line 23
  iadd r2.x, r2.x, l(1)
endloop 
mov r2.y, r2.y  // r2.y <- vout.color.x
mov r2.z, r2.z  // r2.z <- vout.color.y
mov r2.w, r2.w  // r2.w <- vout.color.z

#line 27
mov r1.x, cb0[8].w  // r1.x <- vout.color.w
mov r1.yz, v2.xxyx  // r1.y <- vout.texcoord.x; r1.z <- vout.texcoord.y
mov o0.xyzw, r0.xyzw
mov o1.xyz, r2.yzwy
mov o1.w, r1.x
mov o2.xy, r1.yzyy
ret 
// Approximately 47 instruction slots used
